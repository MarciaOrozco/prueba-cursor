/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/nutricionistas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Buscar nutricionistas
         * @description Busca nutricionistas aplicando filtros opcionales por nombre, especialidad, modalidad o enfoque.
         *     Permite refinamiento de búsqueda con múltiples criterios.
         *
         */
        get: operations["buscarNutricionistas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nutricionistas/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener perfil detallado del nutricionista
         * @description Obtiene información detallada del nutricionista incluyendo formación, experiencia, reseñas y disponibilidad.
         *
         */
        get: operations["obtenerPerfilNutricionista"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Agendar nuevo turno
         * @description Crea un nuevo turno vinculando paciente con nutricionista.
         *     Valida disponibilidad y genera notificaciones automáticas.
         *
         */
        post: operations["agendarTurno"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener detalles del turno
         * @description Obtiene información detallada de un turno específico
         */
        get: operations["obtenerTurno"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/turnos/{id}/cancelar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Cancelar turno
         * @description Cancela un turno existente. El turno debe estar en estado 'confirmado' o 'pendiente'.
         *     Genera notificaciones automáticas a las partes involucradas.
         *
         */
        patch: operations["cancelarTurno"];
        trace?: never;
    };
    "/turnos/{id}/reprogramar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reprogramar turno
         * @description Reprograma un turno existente a una nueva fecha y hora.
         *     Valida disponibilidad del nutricionista en el nuevo horario.
         *
         */
        patch: operations["reprogramarTurno"];
        trace?: never;
    };
    "/turnos/{id}/documentos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener documentos del turno
         * @description Obtiene todos los documentos adjuntos a un turno específico
         */
        get: operations["obtenerDocumentosTurno"];
        put?: never;
        /**
         * Adjuntar documento al turno
         * @description Permite al paciente adjuntar documentos previos (análisis, estudios) al turno.
         *     Los documentos quedan disponibles para el nutricionista antes de la consulta.
         *
         */
        post: operations["adjuntarDocumento"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pacientes/{id}/turnos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener turnos del paciente
         * @description Obtiene todos los turnos de un paciente específico
         */
        get: operations["obtenerTurnosPaciente"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Información del paciente */
        Paciente: {
            /**
             * Format: uuid
             * @description ID único del paciente
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description Nombre del paciente
             * @example María
             */
            nombre: string;
            /**
             * @description Apellido del paciente
             * @example García
             */
            apellido: string;
            /**
             * Format: email
             * @description Email del paciente
             * @example maria.garcia@email.com
             */
            email: string;
            /**
             * @description Teléfono del paciente
             * @example +54 9 11 1234-5678
             */
            telefono?: string;
            /**
             * Format: date-time
             * @description Fecha de registro en la plataforma
             * @example 2024-01-15T10:30:00Z
             */
            fechaRegistro?: string;
        };
        /** @description Información del nutricionista */
        Nutricionista: {
            /**
             * Format: uuid
             * @description ID único del nutricionista
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            id: string;
            /**
             * @description Nombre del nutricionista
             * @example Dr. Carlos
             */
            nombre: string;
            /**
             * @description Apellido del nutricionista
             * @example Rodríguez
             */
            apellido: string;
            /**
             * @description Matrícula profesional
             * @example MN 12345
             */
            matricula: string;
            /**
             * @description Especialidades del nutricionista
             * @example [
             *       "nutricion_clinica",
             *       "obesidad"
             *     ]
             */
            especialidades: ("nutricion_clinica" | "nutricion_deportiva" | "nutricion_pediatrica" | "obesidad" | "diabetes" | "celiaquia" | "vegetarianismo")[];
            /**
             * @description Modalidades de atención
             * @example [
             *       "presencial",
             *       "virtual"
             *     ]
             */
            modalidad: ("presencial" | "virtual" | "mixta")[];
            /**
             * @description Calificación promedio del nutricionista
             * @example 4.8
             */
            rating?: number;
            /**
             * @description Número total de reseñas
             * @example 156
             */
            totalResenas?: number;
            /**
             * Format: uri
             * @description URL de la foto del nutricionista
             * @example https://nutrito.com/fotos/carlos-rodriguez.jpg
             */
            foto?: string;
        };
        /** @description Resumen del nutricionista para listados */
        NutricionistaResumen: {
            /**
             * Format: uuid
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            id?: string;
            /** @example Dr. Carlos */
            nombre?: string;
            /** @example Rodríguez */
            apellido?: string;
            /** @example MN 12345 */
            matricula?: string;
            /** @example [
             *       "nutricion_clinica",
             *       "obesidad"
             *     ] */
            especialidades?: string[];
            /** @example [
             *       "presencial",
             *       "virtual"
             *     ] */
            modalidad?: string[];
            /** @example 4.8 */
            rating?: number;
            /** @example 156 */
            totalResenas?: number;
            /**
             * Format: uri
             * @example https://nutrito.com/fotos/carlos-rodriguez.jpg
             */
            foto?: string;
        };
        PerfilNutricionista: components["schemas"]["Nutricionista"] & {
            /** @description Formación académica del nutricionista */
            formacion?: {
                /** @example Licenciado en Nutrición */
                titulo?: string;
                /** @example Universidad de Buenos Aires */
                institucion?: string;
                /** @example 2015 */
                "a\u00F1o"?: number;
            }[];
            /**
             * @description Años de experiencia
             * @example 8 años de experiencia en nutrición clínica
             */
            experiencia?: string;
            /**
             * @description Descripción profesional
             * @example Especialista en nutrición clínica con enfoque en obesidad y diabetes
             */
            descripcion?: string;
            /** @description Horarios de atención disponibles */
            horariosAtencion?: {
                /** @enum {string} */
                dia?: "lunes" | "martes" | "miercoles" | "jueves" | "viernes" | "sabado" | "domingo";
                /** Format: time */
                horaInicio?: string;
                /** Format: time */
                horaFin?: string;
            }[];
            /** @description Últimas reseñas del nutricionista */
            "rese\u00F1as"?: components["schemas"]["Resena"][];
        };
        /** @description Reseña de un paciente sobre un nutricionista */
        Resena: {
            /**
             * Format: uuid
             * @example 550e8400-e29b-41d4-a716-446655440002
             */
            id: string;
            /**
             * @description Nombre del paciente (anonimizado)
             * @example María G.
             */
            pacienteNombre?: string;
            /** @example 5 */
            rating: number;
            /** @example Excelente profesional, muy claro en sus explicaciones */
            comentario: string;
            /**
             * Format: date
             * @example 2024-01-10
             */
            fecha: string;
        };
        /** @description Información del turno */
        Turno: {
            /**
             * Format: uuid
             * @description ID único del turno
             * @example 550e8400-e29b-41d4-a716-446655440003
             */
            id: string;
            /**
             * Format: uuid
             * @description ID del paciente
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            pacienteId: string;
            /**
             * Format: uuid
             * @description ID del nutricionista
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            nutricionistaId: string;
            /**
             * Format: date
             * @description Fecha del turno
             * @example 2024-03-15
             */
            fecha: string;
            /**
             * Format: time
             * @description Hora del turno
             * @example 14:30
             */
            hora: string;
            /**
             * @description Modalidad del turno
             * @example virtual
             * @enum {string}
             */
            modalidad: "presencial" | "virtual" | "mixta";
            /**
             * @description Estado actual del turno
             * @example confirmado
             * @enum {string}
             */
            estado: "pendiente" | "confirmado" | "cancelado" | "completado" | "reprogramado";
            /**
             * @description Método de pago seleccionado
             * @example mercado_pago
             * @enum {string}
             */
            metodoPago?: "efectivo" | "transferencia" | "tarjeta_credito" | "tarjeta_debito" | "mercado_pago";
            /**
             * Format: date-time
             * @description Fecha de creación del turno
             * @example 2024-01-20T15:30:00Z
             */
            fechaCreacion?: string;
            /**
             * Format: date-time
             * @description Fecha de última modificación
             * @example 2024-01-20T15:30:00Z
             */
            fechaModificacion?: string;
            paciente?: components["schemas"]["Paciente"];
            nutricionista?: components["schemas"]["NutricionistaResumen"];
        };
        /** @description Datos para crear un nuevo turno */
        TurnoCrear: {
            /**
             * Format: uuid
             * @description ID del nutricionista
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            nutricionistaId: string;
            /**
             * Format: date
             * @description Fecha del turno
             * @example 2024-03-15
             */
            fecha: string;
            /**
             * Format: time
             * @description Hora del turno
             * @example 14:30
             */
            hora: string;
            /**
             * @description Modalidad del turno
             * @example virtual
             * @enum {string}
             */
            modalidad: "presencial" | "virtual" | "mixta";
            /**
             * @description Método de pago
             * @example mercado_pago
             * @enum {string}
             */
            metodoPago: "efectivo" | "transferencia" | "tarjeta_credito" | "tarjeta_debito" | "mercado_pago";
            /**
             * @description Motivo de la consulta
             * @example Consulta inicial para plan de alimentación
             */
            motivo?: string;
        };
        /** @description Vínculo entre paciente y nutricionista */
        VinculoPacienteNutricionista: {
            /**
             * Format: uuid
             * @description ID único del vínculo
             * @example 550e8400-e29b-41d4-a716-446655440004
             */
            id: string;
            /**
             * Format: uuid
             * @description ID del paciente
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            pacienteId: string;
            /**
             * Format: uuid
             * @description ID del nutricionista
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            nutricionistaId: string;
            /**
             * Format: date-time
             * @description Fecha de inicio del vínculo
             * @example 2024-01-20T15:30:00Z
             */
            fechaInicio: string;
            /**
             * @description Si el vínculo está activo
             * @example true
             */
            activo: boolean;
            paciente?: components["schemas"]["Paciente"];
            nutricionista?: components["schemas"]["NutricionistaResumen"];
        };
        /** @description Documento adjunto a un turno */
        Documento: {
            /**
             * Format: uuid
             * @description ID único del documento
             * @example 550e8400-e29b-41d4-a716-446655440005
             */
            id: string;
            /**
             * Format: uuid
             * @description ID del paciente
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            pacienteId: string;
            /**
             * Format: uuid
             * @description ID del turno (opcional)
             * @example 550e8400-e29b-41d4-a716-446655440003
             */
            turnoId?: string;
            /**
             * @description Nombre original del archivo
             * @example analisis_sangre_marzo2024.pdf
             */
            nombreArchivo: string;
            /**
             * @description Nombre descriptivo del documento
             * @example Análisis de sangre - Marzo 2024
             */
            nombre: string;
            /**
             * Format: uri
             * @description URL para acceder al documento
             * @example https://nutrito.com/documentos/550e8400-e29b-41d4-a716-446655440005
             */
            url: string;
            /**
             * @description Tipo de documento
             * @example analisis_sangre
             * @enum {string}
             */
            tipo: "analisis_sangre" | "estudios_imagen" | "informe_medico" | "otros";
            /**
             * @description Tamaño del archivo en bytes
             * @example 1048576
             */
            "tama\u00F1o"?: number;
            /**
             * Format: date-time
             * @description Fecha de carga del documento
             * @example 2024-01-20T16:00:00Z
             */
            fechaCarga: string;
        };
        /** @description Información de paginación */
        Pagination: {
            /**
             * @description Número total de elementos
             * @example 150
             */
            total: number;
            /**
             * @description Límite de elementos por página
             * @example 20
             */
            limit: number;
            /**
             * @description Número de elementos omitidos
             * @example 0
             */
            offset: number;
            /**
             * @description Si hay más páginas disponibles
             * @example true
             */
            hasNext: boolean;
            /**
             * @description Si hay páginas anteriores
             * @example false
             */
            hasPrev: boolean;
        };
        /** @description Respuesta de error estándar */
        ErrorResponse: {
            error: {
                /**
                 * @description Código de error
                 * @example VALIDATION_ERROR
                 */
                code?: string;
                /**
                 * @description Mensaje de error
                 * @example Los datos proporcionados no son válidos
                 */
                message?: string;
                /** @description Detalles específicos del error */
                details?: {
                    /** @example fecha */
                    field?: string;
                    /** @example La fecha debe ser futura */
                    message?: string;
                }[];
            };
            /**
             * Format: date-time
             * @description Timestamp del error
             * @example 2024-01-20T15:30:00Z
             */
            timestamp: string;
            /**
             * @description Ruta donde ocurrió el error
             * @example /v1/turnos
             */
            path: string;
        };
    };
    responses: {
        /** @description Solicitud inválida */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "VALIDATION_ERROR",
                 *         "message": "Los datos proporcionados no son válidos",
                 *         "details": [
                 *           {
                 *             "field": "fecha",
                 *             "message": "La fecha debe ser futura"
                 *           }
                 *         ]
                 *       },
                 *       "timestamp": "2024-01-20T15:30:00Z",
                 *       "path": "/v1/turnos"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description No autorizado - Token JWT inválido o faltante */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "UNAUTHORIZED",
                 *         "message": "Token de autenticación requerido"
                 *       },
                 *       "timestamp": "2024-01-20T15:30:00Z",
                 *       "path": "/v1/turnos"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Recurso no encontrado */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "NOT_FOUND",
                 *         "message": "El recurso solicitado no fue encontrado"
                 *       },
                 *       "timestamp": "2024-01-20T15:30:00Z",
                 *       "path": "/v1/turnos/550e8400-e29b-41d4-a716-446655440003"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Error interno del servidor */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "INTERNAL_ERROR",
                 *         "message": "Error interno del servidor"
                 *       },
                 *       "timestamp": "2024-01-20T15:30:00Z",
                 *       "path": "/v1/turnos"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    buscarNutricionistas: {
        parameters: {
            query?: {
                /** @description Filtrar por nombre del nutricionista */
                nombre?: string;
                /** @description Filtrar por especialidad */
                especialidad?: ("nutricion_clinica" | "nutricion_deportiva" | "nutricion_pediatrica" | "obesidad" | "diabetes" | "celiaquia" | "vegetarianismo")[];
                /** @description Filtrar por modalidad de atención */
                modalidad?: ("presencial" | "virtual" | "mixta")[];
                /** @description Rating mínimo del nutricionista */
                rating_min?: number;
                /** @description Número máximo de resultados */
                limit?: number;
                /** @description Número de resultados a omitir para paginación */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de nutricionistas encontrados */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["NutricionistaResumen"][];
                        pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalServerError"];
        };
    };
    obtenerPerfilNutricionista: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del nutricionista */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Perfil completo del nutricionista */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PerfilNutricionista"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    agendarTurno: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TurnoCrear"];
            };
        };
        responses: {
            /** @description Turno creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Turno"];
                        /** @example Turno agendado exitosamente. Se ha enviado una confirmación por email. */
                        message?: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            /** @description Conflicto - Turno no disponible */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    obtenerTurno: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del turno */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Detalles del turno */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Turno"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    cancelarTurno: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del turno */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Motivo de la cancelación
                     * @example Cambio de planes
                     */
                    motivo: string;
                    /**
                     * @description Si se debe notificar al nutricionista
                     * @default true
                     */
                    notificar_nutricionista?: boolean;
                };
            };
        };
        responses: {
            /** @description Turno cancelado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Turno"];
                        /** @example Turno cancelado exitosamente */
                        message?: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Conflicto - Turno no puede ser cancelado */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    reprogramarTurno: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del turno */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: date
                     * @description Nueva fecha del turno
                     * @example 2024-03-15
                     */
                    fecha: string;
                    /**
                     * Format: time
                     * @description Nueva hora del turno
                     * @example 14:30
                     */
                    hora: string;
                    /**
                     * @description Modalidad del turno
                     * @example virtual
                     * @enum {string}
                     */
                    modalidad?: "presencial" | "virtual" | "mixta";
                };
            };
        };
        responses: {
            /** @description Turno reprogramado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Turno"];
                        /** @example Turno reprogramado exitosamente */
                        message?: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Conflicto - Nuevo horario no disponible */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    obtenerDocumentosTurno: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del turno */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de documentos del turno */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Documento"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    adjuntarDocumento: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID único del turno */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Archivo a adjuntar (PDF, JPG, PNG)
                     */
                    archivo: string;
                    /**
                     * @description Nombre descriptivo del documento
                     * @example Análisis de sangre - Marzo 2024
                     */
                    nombre: string;
                    /**
                     * @description Tipo de documento
                     * @example analisis_sangre
                     * @enum {string}
                     */
                    tipo: "analisis_sangre" | "estudios_imagen" | "informe_medico" | "otros";
                };
            };
        };
        responses: {
            /** @description Documento adjuntado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Documento"];
                        /** @example Documento adjuntado exitosamente */
                        message?: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Archivo demasiado grande */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    obtenerTurnosPaciente: {
        parameters: {
            query?: {
                /** @description Filtrar por estado del turno */
                estado?: ("pendiente" | "confirmado" | "cancelado" | "completado" | "reprogramado")[];
                /** @description Número máximo de resultados */
                limit?: number;
                /** @description Número de resultados a omitir para paginación */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID único del paciente */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de turnos del paciente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Turno"][];
                        pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
